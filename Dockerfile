FROM golang:1.24.3-alpine AS builder

# Создаем рабочую директорию /app внутри контейнера
# Все последующие команды будут выполняться относительно этой папки
WORKDIR /app

# Копируем ТОЛЬКО файлы зависимостей
COPY go.mod go.sum ./

# Скачиваем зависимости проекта. Загружает все библиотеки, указанные в go.mod
RUN go mod download

# Копируем ВЕСь исходный код проекта в контейнер
# В /app находятся все файлы приложения (main.go, cmd и тд)
COPY . .

# Собираем приложение в бинарник с именем "wc"
# Флаги:
# - CGO_ENABLED=0: Отключает CGO (статическая сборка, работает без системных библиотек)
# - ldflags="-w -s": Удаляет отладочную информацию, уменьшая размер бинарника.
# - -o wc: Сохраняет бинарник как "wc".
RUN CGO_ENABLED=0 go build -ldflags="-w -s" -o wc

# Используем чистый образ Alpine Linux, тк весит ~5МБ, и не содержит ничего лишнего
FROM alpine:3.21

# Создаем рабочую директорию /app в финальном образе
WORKDIR /app

# Копируем бинарник "wc" из этапа сборки (builder) в текущую директорию (/app)
COPY --from=builder /app/wc .

RUN adduser -D -g '' alan && \
    chown alan:alan /app/wc && \
    chmod +x /app/wc

# Переключаемся на пользователя "alan"
USER alan

CMD ["./wc"]
